# -*- coding: utf-8 -*-
"""Python core.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WyeUZuLWKCFV3Fzr3LPjQ6wd8OaTsRGk
"""

#1.
"""Applications can be categorized into different types based on their functionality and purpose. Here are some common types:

Web Applications :- Applications that run on web browsers, e.g., Gmail, Facebook, YouTube.
Desktop Applications :- Software that runs on personal computers, e.g., Microsoft Word, Adobe Photoshop.
Mobile Applications :- Apps designed for smartphones, e.g., WhatsApp, Instagram.
Console Applications :- Command-line-based applications, mostly used by developers.
Enterprise Applications :- Large-scale applications used in businesses, e.g., ERP systems.
Game Applications :- Video games, e.g., PUBG, Call of Duty.
AI & Machine Learning Applications :- AI-powered systems, e.g., ChatGPT, voice assistants."""

#2.
"""Programming is the process of writing instructions (code) that a computer can understand and execute to perform specific tasks."""

#3.
"""Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.
Its high-level built in data structures, combined with dynamic typing and dynamic binding, make it very attractive for Rapid Application Development."""

#4.
num = float(input("Enter a number: "))

if num > 0:
    print("The number is positive.")
elif num < 0:
    print("The number is negative.")
else:
    print("The number is zero.")

#5.
num = int(input("Enter a number: "))

if num < 0:
    print("Factorial does not exist for negative numbers.")
elif num == 0:
    print("The factorial of 0 is 1.")
else:
    factorial = 1
    for i in range(1, num + 1):
        factorial *= i  # Multiply numbers from 1 to num
    print(f"The factorial of {num} is {factorial}")

#6.
n = int(input("Enter the number: "))

a, b = 0, 1

if n <= 0:
    print("Please enter a positive integer.")
elif n == 1:
    print("Fibonacci sequence:", a)
else:
    print("Fibonacci sequence:")
    for _ in range(n):
        print(a, end=" ")  # Print the term
        a, b = b, a + b

#7.

#8.
"""The continue statement is used inside loops to skip the current iteration and move to the next one, without exiting the loop."""

#9.
#Method 1: Using a Temporary Variable
a = 5
b = 2

temp = a
a = b
b = temp

print(f"After swapping: a = {a}, b = {b}")


#Method 2: Swapping Without a Temporary Variable
c = 5
d = 2

c, d = d, c  # Python's tuple unpacking method

print(f"After swapping: a = {a}, b = {b}")

#Method 3: Using Arithmetic Operations (Without Temp Variable)
x = 5
y = 2

x = x + y
y = x - y
x = x - y

print(f"After swapping: a = {a}, b = {b}")

#10.
num = int(input("Enter a number: "))

# Check if the number is even or odd
if num % 2 == 0:
    print(f"{num} is an Even number.")
else:
    print(f"{num} is an Odd number.")

#11.
letter = input("Enter a letter: ").lower()

vowels = "aeiou"

if letter in vowels:
    print(f"{letter} is a vowel.")
else:
    print(f"{letter} is not a vowel.")

#12.
a = int(input("Enter first number: "))
b = int(input("Enter second number: "))
c = int(input("Enter third number: "))

if a == b or b == c or a == c:
    print("Sum is 0 because at least two values are equal.")
else:
    print(f"The sum of the numbers is: {a + b + c}")

#13.
a = int(input("Enter first number: "))
b = int(input("Enter second number: "))

if a == b or abs(a - b) == 5 or (a + b) == 5:
    print(True)
else:
    print(False)

#14.
n = int(input("Enter a positive integer: "))

sum_n = n * (n + 1) // 2

print(f"The sum of the first {n} positive integers is: {sum_n}")

#15.
string = input("Enter a string: ")

# Calculate length using len() function
length = len(string)

print(f"The length of the string is: {length}")

#16.
string = input("Enter a string: ")

char_count = {}
for char in string:
    if char in char_count:
        char_count[char] += 1
    else:
        char_count[char] = 1

print("Character frequency in the string:")
for key, value in char_count.items():
    print(f"'{key}': {value}")

#17.What Are Negative Indexes?
'''Negative indexes in Python allow you to access elements from the end of a sequence (like lists, strings, or tuples).
Instead of counting from the beginning (0, 1, 2, ...), negative indexing starts from the end (-1, -2, -3, ...).'''
#Why Are Negative Indexes Used?
'''1. Convenient Access to the Last Elements 2.Avoids Errors 3.Simplifies Code'''

#18.
text = 'banana banana apple banana'
substring = 'banana'

# Count occurrences using count() function
count = text.count(substring)

print(f"The substring '{substring}' appears {count} times in the given string.")

#19.
sentence = 'Python is easy and Python is fun'

words = sentence.split()

word_count = {}

for word in words:
    word = word.lower()  # Convert to lowercase for case-insensitive counting
    if word in word_count:
        word_count[word] += 1
    else:
        word_count[word] = 1

print("Word occurrences in the sentence:")
for key, value in word_count.items():
    print(f"'{key}': {value}")

#20.
str1 = input("Enter first string: ")
str2 = input("Enter second string: ")


new_str1 = str2[:2] + str1[2:]
new_str2 = str1[:2] + str2[2:]

result = new_str1 + " " + new_str2

print("Resulting string:", result)

#21.
word = input("Enter a word: ")

# Check the length of the string
if len(word) < 3:
    result = word  # Leave unchanged if length is less than 3
elif word.endswith("ing"):
    result = word + "ly"  # If ends with 'ing', add 'ly'
else:
    result = word + "ing"  # Otherwise, add 'ing'

print("Modified word:", result)

#22.
def reverse_if_multiple_of_4(s):
    if len(s) % 4 == 0:
        return s[::-1]
    else:
        return s

string = input("Enter a string: ")


result = reverse_if_multiple_of_4(string)
print("Result:", result)

#23.
string = input("Enter a string: ")

if len(string) < 2:
    result = ""
else:
    result = string[:2] + string[-2:]

print("Resulting string:", result)

#24.
def insert_middle(original, insert):
    mid_index = len(original) // 2
    return original[:mid_index] +" "+ insert +" "+ original[mid_index:]

original_string = input("Enter the original string: ")
insert_string = input("Enter the string to insert: ")

result = insert_middle(original_string, insert_string)
print("Modified string:", result)

#25.
'''A list is a mutable, ordered collection of elements that can store multiple data types (integers, strings, floats, etc.).
Lists are defined using square brackets [ ].
They allow duplicate values.
Lists are indexed, starting from 0.'''
numbers = [1, 2, 3, 4, 5]
numbers.reverse()
print(numbers)
reversed_numbers = numbers[::-1]
print(reversed_numbers)

#26.
my_list = [10, 20, 30, 40, 50]
my_list.pop()
print(my_list)

#27.
'''In Python, lists use zero-based indexing, meaning:
The first element is at index 0.
The second element is at index 1.'''
list1 = [2, 33, 222, 14, 25]
list1[1]

#28.
'''append() adds a single element (or an entire list as a single item) at the end of the list.
The length of the list increases by 1, regardless of what is added.'''
list1 = [1, 2, 3]
list1.append([4, 5])
print(list1)

'''extend() adds multiple elements from an iterable (e.g., list, tuple, string) to the end of the list.
The elements are added individually, and the list length increases accordingly.'''
list2 = [1, 2, 3]
list2.extend([4, 5])
print(list2)

#29.
def list_stats(numbers):
    largest = max(numbers)   # Find the largest number
    smallest = min(numbers)  # Find the smallest number
    total_sum = sum(numbers) # Find the sum of all numbers

    return largest, smallest, total_sum

numbers = [10,20,30,40,50]

largest, smallest, total_sum = list_stats(numbers)

print("Largest Number:", largest)
print("Smallest Number:", smallest)
print("Sum of Numbers:", total_sum)

#30.
list1 = [1, 2, 3]
list2 = [1, 2, 3]
list3 = [3, 2, 1]

print(list1 == list2)
print(list1 == list3)

#31.
def count_strings(words):
    count = 0
    for word in words:
        if len(word) >= 2 and word[0] == word[-1]:
            count += 1
    return count

# Test
words_list = ["abc", "xyz", "aba", "1221", "aa", "hello"]
result = count_strings(words_list)

print("Count of matching strings:", result)

#32.
def remove_duplicates(lst):
    return list(set(lst))

numbers = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7]
unique_numbers = remove_duplicates(numbers)

print("List after removing duplicates:", unique_numbers)

#33.
def is_list_empty(lst):
    return len(lst) == 0

list1 = []
list2 = [1, 2, 3]

print("Is list1 empty?", is_list_empty(list1))
print("Is list2 empty?", is_list_empty(list2))

#34.
def have_common_member(list1, list2):
    for item in list1:
        if item in list2:  # Check if any element of list1 is in list2
            return True
    return False

# TEST
list1 = [1, 2, 3, 4]
list2 = [5, 6, 3, 8]

print("Do lists have common elements?", have_common_member(list1, list2))

#35.
squares = [x**2 for x in range(1, 31)]


first_five = squares[:5]
last_five = squares[-5:]

print("First 5 squares:", first_five)
print("Last 5 squares:", last_five)

#36.
def get_unique_elements(list1):
    return list(set(list1))

# Test
numbers = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7]
unique_numbers = get_unique_elements(numbers)

print("Unique elements:", unique_numbers)

#37.
def list_to_string(char_list):
    return "".join(char_list)

# Test
char_list = ['H', 'e', 'l', 'l', 'o']
result = list_to_string(char_list)

print("Converted string:", result)

#38.
import random

def pick_random_item(lst):
    return random.choice(lst)

# Example list
items = ["Apple", "Banana", "Cherry", "Mango", "Orange"]
random_item = pick_random_item(items)

print("Randomly selected item:", random_item)

#39.
def second_smallest(lst):
    unique_numbers = sorted(set(lst))
    if len(unique_numbers) < 2:
        return "List must have at least two unique numbers."
    return unique_numbers[1]

# Test
numbers = [5, 1, 2, 8, 3, 2, 1, 4]
print("Second smallest number:", second_smallest(numbers))

#40.
def get_unique_values(lst):
    return list(set(lst))

# Example list
numbers = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7]
unique_numbers = get_unique_values(numbers)

print("Unique values:", unique_numbers)

#41.
def contains_sublist(main_list, sub_list):
    return str(sub_list)[1:-1] in str(main_list)[1:-1]

# Test
main_list = [1, 2, 3, 4, 5, 6]
sub_list = [3, 4, 5]

print("Does the main list contain the sublist?", contains_sublist(main_list, sub_list))

#42.
my_list = [1, 2, 3]

a, b, c = my_list

print("a:", a)
print("b:", b)
print("c:", c)

#43.
#What is a Tuple?
'''A tuple is an ordered, immutable collection in Python. It is used to store multiple values in a single variable. Tuples are defined using parentheses ().'''
'''Feature->      List ([])                           Tuple (())
   Mutability	    Mutable (can be changed)	          Immutable (cannot be changed)
   Performance	  Slower	                            Faster (due to immutability)
   Syntax	        Defined using []	                  Defined using ()
   Usage	        Used when data needs modification	  Used when data should remain constant
   Methods	      Many methods like append(),remove() Limited methods (count(), index())'''

#44.
my_tuple = (25, "Hello", 3.14, True, [1, 2, 3], {'a': 1, 'b': 2})

print("Tuple with different data types:", my_tuple)

#45.
tuples_list = [(1, 'a'), (2, 'b'), (3, 'c')]

numbers, letters = zip(*tuples_list)

numbers = list(numbers)
letters = list(letters)

print("Numbers:", numbers)
print("Letters:", letters)

#46.
tuples_list = [("a", 1), ("b", 2), ("c", 3)]

dictionary = dict(tuples_list)

print("Converted dictionary:", dictionary)

#47.
tuple_list = (("name", "Alice"), ("age", 25), ("city", "New York"))

dictionary = dict(tuple_list)

print("Dictionary:", dictionary)

#48.
my_dict = {'apple': 5, 'banana': 2, 'cherry': 8, 'date': 3}

asc_sorted_dict = dict(sorted(my_dict.items(), key=lambda item: item[1]))

desc_sorted_dict = dict(sorted(my_dict.items(), key=lambda item: item[1], reverse=True))

print("Ascending Order:", asc_sorted_dict)
print("Descending Order:", desc_sorted_dict)

#49.
dict1 = {'a': 1, 'b': 2}
dict2 = {'c': 3, 'd': 4}
dict3 = {'e': 5, 'f': 6}

concatenated_dict = {**dict1, **dict2, **dict3}

print("Concatenated Dictionary:", concatenated_dict)

#50.
my_dict = {'a': 1, 'b': 2, 'c': 3}

def check_key(key):
    if key in my_dict:
        print(f"Key '{key}' exists in the dictionary.")
    else:
        print(f"Key '{key}' does not exist in the dictionary.")

# Test
check_key('b')
check_key('x')

#51.
my_dict = {'a': 1, 'b': 2, 'c': 3}

for key in my_dict:
    print(key, ":", my_dict[key])
for key, value in my_dict.items():
    print(key, "->", value)

#52.
y_dict = {'name': 'Alice', 'age': 25}

if 'name' in my_dict:
    print("Key exists")
if my_dict.get('age') is not None:
    print("Key exists")

#53.
dictionary = {x: x**2 for x in range(1, 16)}
print(dictionary)

#54.
my_dict = {'a': 1, 'b': 2, 'c': 3}
keys_to_check = {'a', 'b'}

if keys_to_check.issubset(my_dict.keys()):
    print("All keys exist")

#55.
dict1 = {'a': 1, 'b': 2}
dict2 = {'c': 3, 'd': 4}

dict1.update(dict2)
print(dict1)

#56.
keys = ['a', 'b', 'c']
values = [400, 400, 300]

result = dict(zip(keys, values))
print(result)

#57.
my_dict = {'a': 50, 'b': 20, 'c': 80, 'd': 30}

top_3 = sorted(my_dict.values(), reverse=True)[:3]
print(top_3)

#58.
from collections import Counter

data = [{'item': 'item1', 'amount': 400},
        {'item': 'item2', 'amount': 300},
        {'item': 'item1', 'amount': 750}]

counter = Counter()
for d in data:
    counter[d['item']] += d['amount']

print(counter)

#59-60.
from collections import Counter

string = "w3resource"
char_count = Counter(string)

print(char_count)

#61.
def factorial(n):
    return 1 if n == 0 else n * factorial(n - 1)

print(factorial(5))

#61.
def check_range(n, start, end):
    return start <= n <= end

print(check_range(5, 1, 10))

#62.
def is_in_range(num, start, end):
    if start <= num <= end:
        return f"{num} is in the range ({start}, {end})"
    else:
        return f"{num} is NOT in the range ({start}, {end})"

# Test
num = 10
start = 5
end = 15
print(is_in_range(num, start, end))

#63.
def is_perfect(n):
    return sum(i for i in range(1, n) if n % i == 0) == n

print(is_perfect(6))

#64.
def is_palindrome(s):
    return s == s[::-1]

print(is_palindrome("madam"))

#65.
'''Built-in Functions: These are the functions that are already available in Python without needing any additional code. Examples include print(), len(), max(), min(), sum(), and many more.
User-Defined Functions: These are the functions that you create in your code using the def keyword.'''

#66.
import random

my_list = [1, 2, 3, 4, 5]
print(random.choice(my_list))

#67.
print(random.randrange(1, 100))

#68.
print(random.random())

#69.
random_number = random.randint(1, 10)
print(random_number)

#70.
my_list = [1, 2, 3, 4, 5]
random.shuffle(my_list)
print(my_list)

#71.
'''In Python, a file function allows you to interact with files on the file system. The file operations you can perform include opening a file, reading from it, writing to it, or closing it. You can use the built-in open() function to work with files.
To create and write a file in Python:
->Use the open() function to open (or create) a file.
->Use the write() method to write data into the file.
->Use the close() method to close the file when done.
Keywords for creating and writing to a file:
->"w": Open a file for writing (creates a new file or truncates the file if it exists).
->"a": Open a file for appending (creates a new file if it does not exist).
->"x": Open a file for exclusive creation (fails if the file already exists).
->"wb", "ab", etc.: Open the file in binary mode'''

#72.
with open("test.txt", "w") as file:
    file.write("Hello, world!")

with open("test.txt", "r") as file:
    print(file.read())

#73.
with open("test.txt", "a") as file:
    file.write("\nAppending text.")

with open("test.txt", "r") as file:
    print(file.read())

#74.
def read_n_lines(filename, n):
    with open(filename) as file:
        for _ in range(n):
            print(file.readline(), end='')

read_n_lines("test.txt", 1)

#75.
def last_lines(filename, n):
  with open(filename, "r") as file:
    lines = file.readlines()
    last_n_lines = lines[-n:]
  for line in last_n_lines:
    print(line.strip())

last_lines("test.txt", 1)

#76.
file_name = "test.txt"
list1 = [] 
with open(file_name, "r") as file:
    lines = file.readlines()

for line in lines:
    list1.append(line.strip())
print(list1)

#77.
file_name = "test.txt"
content = ""
with open(file_name, "r") as file:
    for line in file:
        content += line
print(content)

#78.
def longest_word(filename):
    with open(filename) as file:
        words = file.read().split()
    return max(words, key=len)

print(longest_word("test.txt"))

#79.
with open("test.txt") as file:
    print(sum(1 for _ in file))

#80.
from collections import Counter
file_name = "test.txt"
word_count = Counter()
with open(file_name, "r") as file:
    for line in file:
        words = line.split()
        word_count.update(words)
for word, count in word_count.items():
    print(f"'{word}': {count} times")

#81.
my_list = ["apple", "banana", "cherry"]
with open("output.txt", "w") as file:
    file.writelines("\n".join(my_list))

#82.
with open("test.txt", "r") as file1, open("copy.txt", "w") as file2:
    file2.write(file1.read())

#83.

#84.

#85.

#86.

#87.

#88.

#89.

#90.
